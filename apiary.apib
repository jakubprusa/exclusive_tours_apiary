FORMAT: 1A
HOST: https://concierge.exclusivetours.cz/api/v1

# Concierge ET - API Documentation

Concierge ET is based on REST principles, all you need to use it is your Concierge ET account.
You have to be authenticated and call the simple HTTPs request on the URL specified below.
The following documentation covers core resources that are used to manipulate with the main
entities. First of all, read basic instructions to start using the API.

To be able to access API at all you have to have valid application token and send it as a part of HTTP header

 * Send a HTTP header `App-Token: {app_token}`, where `{app_token}` is your Application token
 
For calling endpoints valid user authentication token has to be provided. This token can be retreived using  signin endpoint.

Allowed HTTPs requests:

 * `POST` - To create resource
 * `PATCH` - To update resource
 * `GET` - Get a resource or list of resources
 * `DELETE` - To delete resource



# Group Registration/Login

# Registration [/users]
## Register [POST]

+ Returns created user id and access token if registration succeeds

+ Request (application/json)

        {
            "email": "vomacka@gmail.com",
            "password": "supersecretpassword",
            "firstname": "Ostra",
            "surname": "Vomacka"
        }
        
+ Response 200 (application/json)

        {
          "id": 3,
          "email": "vomacka@gmail.com",
          "firstname": "Ostra",
          "surname": "Vomacka",
          "created_at": "2015-08-27T19:31:22.708Z",
          "updated_at": "2015-08-27T19:31:22.708Z",
          "auth_token": "DqACTi7ucngCAMotWcG4"
        }
        
+ Response 422 (application/json)

        {
          "errors": {
            "email": [
              "has already been taken"
            ]
          }
        }

# Sign in [/sessions]
## Sign in [POST]

+ Returns user id and access token if authentication succeeds

+ Request (application/json)

        {
            "email": "vomacka@gmail.com",
            "password": "supersecretpassword"
        }
        
+ Response 200 (application/json)

        {
          "id": 3,
          "email": "vomacka@gmail.com",
          "created_at": "2015-08-27T19:31:22.000Z",
          "updated_at": "2015-08-27T19:33:17.818Z",
          "auth_token": "QU_ratzvfWHE9GpshWNs",
          "firstname": "Ostra",
          "surname": "Vomacka"
        }

+ Response 422 (application/json)

        {
          "errors": "Invalid email or password"
        }


# Group Users
# Users [/user]

The following is a section of resources related to the user.

## Retreive user [GET]

+ Request (application/json)
    + Headers
        
            Authorization: "{auth_token}"

+ Response 200 (application/json)

        {
          "id": 2,
          "email": "vomacka@gmail.com",
          "created_at": "2015-08-27T19:43:37.000Z",
          "updated_at": "2015-08-27T19:43:37.000Z",
          "auth_token": "xdAzjBfzAiZQy3oSae3M"
        }
        
+ Response 401 (application/json)

        {
          "errors": "Not authenticated"
        }



# Profile - not implemented yet [/user/profile]

Will contain quite some information
+ Saved Persons that can be added to the flight/hotel reservation
+ Users preferences - preferred class, preferred carrier ......
+ Passport, Identification
+ GP Web Pay credit card token


## Retreive Profile [GET]

+ Response 200

## Update Profile [PATCH]

+ Response 200


# Group Flight
# Search [/flight/search]

## Search [GET]

Returns set of search results containing only minimal set of attributes.
Also saves full search results for subsequent use.

+ flight_type (enum) - __one-way__ or  __return-way__
+ place_departure (string) - Code of airport or name of city
+ place_arrival (string) - Code of airport or name of city
+ direct_flight (bool) - Flight with or without layover
+ time_departure (date) - Time of departure in ISO-8601
+ time_arrival (date) - Time of departure in ISO-8601
+ travellers_age (number[]) - Array with ages of passengers

+ Request (application/json)

        {
            "flight_type": "one-way",
            "place_departure": "PRG",
            "place_arrival": "CHDG",
            "direct_flight": TRUE,
            "time_departure": "2015-05-15T13:05:05+00:0",
            "time_arrival": "2015-05-15T13:05:05+00:0",
            "passengers_age": [34,20]
        }
        

+ Response 200 (application/json)

        {
            "results" : [
                {   "flight_id": 1,
                    "travel_class": "economy_class",
                    "number_transfers": 3,
                    "company_logo": "http://viajefilos.com/wp-content/uploads/lufthansa-logo1.jpg"
                },{ "flight_id": 2,
                    "travel_class": "business_class",
                    "number_transfers": 1,
                    "company_logo": "http://viajefilos.com/wp-content/uploads/lufthansa-logo1.jpg"
                }
            
            ]
        }
        


# Detail [/flight/detail] 
## Retreive detail [GET]

Retreieves all attributes from found flight based on identifier.

+flight_id (number) GUID generated during search
+flight_duration (number) Duration of all flights in minutes
+layover_time (numner) Time for layover in minutes


+ Request (application/json)

        {
            "flight_id": "1"
        }
        


+ Response 200 (application/json)

        {
            "flight_details" : {
                "summary": {
                    "flight_duration": 7200,
                    "number_layovers": 2,
                    "travel_class": "economy_class",
                    "flight_type": "one-way"

                },
                "connections":[
                    {
                        "place_departure": "PRG",
                        "place_arrival": "VIE",
                        "time_departure": "2015-05-15T13:05:05+00:0",
                        "time_arrival": "2015-05-15T13:05:05+00:0",
                        "airline": "Lufthansa",
                        "flight_code": "OK1234"
                        "layover_time": "90"
                    }, {
                        "place_departure": "VIE",
                        "place_arrival": "CHDG",
                        "time_departure": "2015-05-15T13:05:05+00:0",
                        "time_arrival": "2015-05-15T13:05:05+00:0",
                        "airline": "Lufthansa",
                        "flight_code": "OK4321"
                        "layover_time": "-1"
                    }
                ]
            }
        }
        
+ Response 499 (application/json)

        {
            "message": "expired: search result no longer available"
        }
        
# Make reservation [/flight/reservation]
## Create reservation [POST]

Creates reservation of flight based on identifier received from search.
All information to properly create fliht reservatino has to be provided
+ All Passengers
+ Passengers id, birthdate .....
+ ......

+ Request (application/json)

        {
            "search_result_identifier": "GUID generated during search",
            "passengers_details" : [ { } ],
        }

+ Response 200 (application/json)

        {
            "reservation_identifier": "PNR identifier of valid reservation",
        }
        
        
# Group Hotels
# Search [/hotel/search]

## Search [GET]

Returns set of search results containing only minimal set of attributes.
Also saves full search results for subsequent use.

+ destination (string)      - Place where to book accomodation
+ purpose_of_visit (enum)   - Purpose of visit
+ time_departure(string)    - Time of check-in
+ time_departure(string)    - Time of check-out
+ number_rooms              - Count of rooms to book
+ number_adults             - Count of adults
+ number_kids               - Count of children
+ number_infants            - Count of infants

+ Request (application/json)

        {
            "destination": "London",
            "purpose_of_visit: "Bussines",
            "time_departure": "2015-05-15T13:05:05+00:0",
            "time_arrival": "2015-05-15T13:05:05+00:0",
            "number_rooms": 2,
            "number_adults": 1,
            "number_kids": 3,
            "number_infants": 4,
            
        }
        


+ Response 200 (application/json)

        {
            "results" : [],
        }
        

# Detail [/hotel/detail] 
## Retreive detail [GET]

Retreieves all attributes from found flight based on identifier.

+ Request (application/json)

        {
            "booking_id": "1"
        }
        


+ Response 200 (application/json)

        {
            "booking_details" : {},
        }
        
+ Response 499 (application/json)

        {
            "message": "expired: search result no longer available"
        }


# Detail [/hotel/rooms] 
## Retreive available rooms  [GET]

Retreieves all attributes from found flight based on identifier.

+ Request (application/json)

        {
            "booking_id": "1"
        }
        


+ Response 200 (application/json)

        {
            "booking_details" : {
                "summary": {
                    "latitude": 49.32,
                    "longitude": 49.32,
                    "description": "Lorem ipsum..",
                    "pictures": {
                        "http://exlusive-tours.com/pic/12.png",
                        "http://exlusive-tours.com/pic/13.png",
                        "http://exlusive-tours.com/pic/14.png"
                    }

                },
                "rooms":[
                    {
                        "name": "Luxury exclusice suite",
                        "description": "Lorem ipsum...",
                        "price": 150000,
                        "garniture" : {
                            "bedrooms" : 4,
                            "bathrooms" : 5                            
                        }
                    }, {
                        "name": "Luxury exclusice suite",
                        "description": "Lorem ipsum...",
                        "price": 150000,
                        "garniture" : {
                            "bedrooms" : 4,
                            "bathrooms" : 5                            
                        }
                    }
                ]
            }
        }
        
+ Response 499 (application/json)

        {
            "message": "expired: search result no longer available"
        }
        
# Make reservation [/hotel/reservation]
## Create reservation [POST]

Creates reservation of flight based on identifier received from search.
All information to properly create fliht reservatino has to be provided
+ All Passengers
+ Passengers id, birthdate .....
+ ......

+ Request (application/json)

        {
            "search_result_identifier": "GUID generated during search",
            "booking_id" : 1,
            "passengers_details" : [ { } ],
        }

+ Response 200 (application/json)

        {
            "reservation_identifier": "PNR identifier of valid reservation",
        }


# Group Transfer
# Search [/transfer/search]

## Search [GET]

Returns set of search results containing only minimal set of attributes.
Also saves full search results for subsequent use.

+ Request (application/json)

        {
            "search-payload": "to be specified more granularly"
        }
        


+ Response 200 (application/json)

        {
            "results" : [],
        }
        


# Detail [/transfer/detail] 
## Retreive detail [GET]

Retreieves all attributes from found flight based on identifier.

+ Request (application/json)

        {
            "search_result_identifier": "GUID generated during search"
        }
        


+ Response 200 (application/json)

        {
            "flight_details" : {},
        }
        
+ Response 499 (application/json)

        {
            "message": "expired: search result no longer available"
        }
        
# Make reservation [/transfer/reservation]
## Create reservation [POST]

Creates reservation of flight based on identifier received from search.
All information to properly create fliht reservatino has to be provided
+ All Passengers
+ Passengers id, birthdate .....
+ ......

+ Request (application/json)

        {
            "search_result_identifier": "GUID generated during search",
            "passengers_details" : [ { } ],
        }

+ Response 200 (application/json)

        {
            "reservation_identifier": "PNR identifier of valid reservation",
        }
        
        
        
        
# Group Transaction
# Transaction [/transaction]
## Commit transaction [POST]

Commits (or rolls back) full transaction


+ Request (application/json)

        {
            "reservation_identifier": "reservation_id_returned_by_GDS",
        }

+ Response 200 (application/json)

        {
            "message" : "Success: Transaction has been successfully completed",
            "transaction_id" : 12312,
        }
        
+ Response 499 (application/json)

        {
            "message": "Failure: Transaction could not be completed",
            "reason": "Endpoint flights/hotels/transfers is inaccessible",
        }